name: E2E Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Copy .env.example to .env
        run: cp .env.example .env

      - name: Set IG_TEST_COOKIE for testing
        run: |
          if [ -n "${{ secrets.IG_TEST_COOKIE }}" ]; then
            echo "Using real IG_TEST_COOKIE from secrets"
            echo "IG_TEST_COOKIE=${{ secrets.IG_TEST_COOKIE }}" >> .env
          else
            echo "No IG_TEST_COOKIE found in secrets, using mock value"
            echo "IG_TEST_COOKIE=mock_cookie_for_testing" >> .env
          fi

      - name: Set ENABLE_ANALYSIS=false for all services
        run: echo "ENABLE_ANALYSIS=false" >> .env

      - name: Start Docker Compose
        run: docker compose up -d --build
        env:
          ENABLE_ANALYSIS: "false"
          IG_TEST_COOKIE: ${{ secrets.IG_TEST_COOKIE }}
        
      - name: Wait for services to be ready
        run: sleep 30

      - name: Install dependencies
        run: npm install

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Verify Instagram Scraping API Response
        run: |
          echo "Testing Instagram scraping API directly"
          response=$(curl -s -X POST -H "Content-Type: application/json" -d '{"theme":"Instagram engagement","client_id":"test_client","target":{"age":"18-34","interest":"social media"}}' http://localhost:8000/api/script/auto)
          matching_reels_count=$(echo $response | grep -o '"matching_reels_count":[0-9]*' | cut -d':' -f2)
          echo "API returned matching_reels_count: $matching_reels_count"
          
          if [ "$matching_reels_count" -eq "0" ]; then
            echo "Warning: No matching reels found. This may be expected in test environments."
            # Don't fail the build, just log a warning
          else
            echo "Success: Found $matching_reels_count matching reels."
          fi

      - name: Run Playwright tests
        run: CI=true npx playwright test
        env:
          CI: true
          ENABLE_ANALYSIS: "false"
          PLAYWRIGHT_TEST_BASE_URL: http://localhost:3000

      - name: Docker logs on failure
        if: failure()
        run: docker compose logs

      - name: Stop Docker Compose
        if: always()
        run: docker compose down

  # Optional job that only runs if IG_GRAPH_TOKEN environment variable is set
  test-with-analysis:
    runs-on: ubuntu-latest
    # Use environment variables instead of secrets in job-level conditions
    if: false # Disable this job for now until we have proper token setup
    needs: test
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Copy .env.example to .env
        run: cp .env.example .env

      - name: Set IG_TEST_COOKIE for testing
        run: echo "IG_TEST_COOKIE=mock_cookie_for_testing" >> .env

      - name: Set ENABLE_ANALYSIS=true for all services
        run: echo "ENABLE_ANALYSIS=true" >> .env
        
      - name: Set IG_GRAPH_TOKEN for testing
        # Only run this step if the secret exists
        if: ${{ env.IG_GRAPH_TOKEN != '' }}
        run: echo "IG_GRAPH_TOKEN=${{ env.IG_GRAPH_TOKEN }}" >> .env

      - name: Start Docker Compose
        run: docker compose up -d --build
        env:
          ENABLE_ANALYSIS: "true"
          IG_TEST_COOKIE: ${{ secrets.IG_TEST_COOKIE }}
        
      - name: Wait for services to be ready
        run: sleep 30

      - name: Install dependencies
        run: npm install

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run Playwright tests
        run: CI=true npx playwright test
        env:
          CI: true
          ENABLE_ANALYSIS: "true"
          PLAYWRIGHT_TEST_BASE_URL: http://localhost:3000

      - name: Docker logs on failure
        if: failure()
        run: docker compose logs

      - name: Stop Docker Compose
        if: always()
        run: docker compose down
